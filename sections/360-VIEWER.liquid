{% schema %}
{
  "name": "Canvas 360 Viewer",
  "settings": [],
  "presets": [
    {
      "name": "Canvas 360 Rolex Style"
    }
  ]
}
{% endschema %}
<style>
  .canvas-360-wrapper {
    position: relative;
    width: 100%;
    max-width: 1100px;
    height: auto;
    background: #FFF !important;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: auto;
    box-sizing: border-box;
  }
  
  canvas#watch360Canvas {
    width: 100% !important;
    height: auto !important;
    display: block;
    filter: drop-shadow(0 30px 40px rgba(0,0,0,0.15));
    background: transparent;
    box-sizing: border-box;
    max-width: 100%;
    object-fit: contain;
    border-radius: 12px;
  }
  
  @media (max-width: 700px) {
    .canvas-360-wrapper {
      max-width: 100%;
      padding: 0;
    }
    canvas#watch360Canvas {
      border-radius: 8px;
    }
  }
</style>

<div class="canvas-360-wrapper">
  <canvas id="watch360Canvas"></canvas>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
  const frameCount = 54;
  const canvas = document.getElementById("watch360Canvas");
  const context = canvas.getContext("2d");
  const images = [];
  let currentFrame = 0;
  let lastTime = 0;
  const fps = 30;
  const interval = 1000 / fps;
  const spinSpeed = 0.2;

  const imagePath = i => `https://cdn.shopify.com/s/files/1/0333/0936/0264/files/1020_360_${i + 1}.jpg`;

  const preloadImages = () => {
    return Promise.all(
      Array.from({length: frameCount}, (_, i) => {
        return new Promise(resolve => {
          const img = new Image();
          img.onload = () => resolve(img);
          img.src = imagePath(i);
        });
      })
    );
  };

  const drawFrame = (index) => {
    const img = images[index];
    if (!img) return;

    // Get natural image dimensions
    const imgWidth = img.naturalWidth;
    const imgHeight = img.naturalHeight;
    const imgRatio = imgWidth / imgHeight;

    // Get canvas display dimensions (CSS)
    const displayWidth = canvas.clientWidth;
    const displayHeight = canvas.clientHeight;
    const canvasRatio = displayWidth / displayHeight;

    let drawWidth, drawHeight, x, y;

    // Calculate dimensions to fit entire image
    if (imgRatio > canvasRatio) {
      // Image is wider than canvas - fit to width
      drawWidth = displayWidth;
      drawHeight = displayWidth / imgRatio;
      x = 0;
      y = (displayHeight - drawHeight) / 2;
    } else {
      // Image is taller than canvas - fit to height
      drawHeight = displayHeight;
      drawWidth = displayHeight * imgRatio;
      x = (displayWidth - drawWidth) / 2;
      y = 0;
    }

    // Set canvas internal dimensions to match display
    canvas.width = displayWidth;
    canvas.height = displayHeight;

    // Clear and draw
    context.clearRect(0, 0, canvas.width, canvas.height);
    context.drawImage(img, x, y, drawWidth, drawHeight);
  };

  const resizeCanvas = () => {
    drawFrame(Math.floor(currentFrame));
  };

  const rotateSpin = (timestamp) => {
    if (!lastTime) lastTime = timestamp;
    const delta = timestamp - lastTime;
    if (delta > interval) {
      currentFrame = (currentFrame + spinSpeed) % frameCount;
      drawFrame(Math.floor(currentFrame));
      lastTime = timestamp;
    }
    requestAnimationFrame(rotateSpin);
  };

  // Initialize
  preloadImages().then(loaded => {
    images.push(...loaded);
    window.addEventListener('resize', resizeCanvas);
    resizeCanvas();
    rotateSpin(performance.now());
  });
});
</script>