{% schema %}
{
  "name": "Canvas 360 Viewer",
  "settings": [],
  "presets": [
    {
      "name": "Canvas 360 Rolex Style"
    }
  ]
}
{% endschema %}
<style>
  .canvas-360-wrapper {
    position: relative;
    width: 100%;
    max-width: 1100px;
    margin: 0 auto;
    background: #FFF;
  }
  
  #watch360Canvas {
    width: 100%;
    height: auto;
    display: block;
    background: transparent;
    border-radius: 12px;
  }
</style>

<div class="canvas-360-wrapper">
  <canvas id="watch360Canvas"></canvas>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
  // 1. Basic Configuration
  const frameCount = 54;
  const spinSpeed = 0.12; // Perfect watch rotation speed
  const imageBaseUrl = 'https://cdn.shopify.com/s/files/1/0333/0936/0264/files/';
  
  // 2. Canvas Setup
  const canvas = document.getElementById('watch360Canvas');
  const ctx = canvas.getContext('2d');
  let imagesLoaded = 0;
  const images = new Array(frameCount);
  
  // 3. Proper Canvas Sizing
  function resizeCanvas() {
    const wrapper = document.querySelector('.canvas-360-wrapper');
    const width = wrapper.clientWidth;
    const height = width * (5/4); // 4:5 aspect ratio
    
    canvas.style.width = width + 'px';
    canvas.style.height = height + 'px';
    
    // High DPI support
    const pixelRatio = window.devicePixelRatio || 1;
    canvas.width = width * pixelRatio;
    canvas.height = height * pixelRatio;
    ctx.scale(pixelRatio, pixelRatio);
  }
  
  // 4. Image Loading with Fallback
  function loadImages() {
    let loadedCount = 0;
    const loadingPromises = [];
    
    for (let i = 0; i < frameCount; i++) {
      loadingPromises.push(new Promise((resolve) => {
        const img = new Image();
        img.onload = function() {
          images[i] = img;
          loadedCount++;
          if (loadedCount === frameCount) {
            console.log('All images loaded successfully');
            startAnimation();
          }
          resolve();
        };
        img.onerror = function() {
          console.warn('Failed to load image', i+1);
          // Fallback to previous image
          images[i] = images[i-1] || new Image();
          loadedCount++;
          resolve();
        };
        img.src = `${imageBaseUrl}1020_360_${i+1}.jpg?${Date.now()}`;
      }));
    }
    
    return Promise.all(loadingPromises);
  }
  
  // 5. Smooth Frame Drawing
  function drawFrame(frame) {
    const img = images[Math.floor(frame) % frameCount];
    if (!img) return;
    
    const canvasWidth = canvas.width / (window.devicePixelRatio || 1);
    const canvasHeight = canvas.height / (window.devicePixelRatio || 1);
    const imgRatio = img.naturalWidth / img.naturalHeight;
    const canvasRatio = canvasWidth / canvasHeight;
    
    let width, height, x, y;
    
    if (imgRatio > canvasRatio) {
      width = canvasWidth;
      height = width / imgRatio;
      x = 0;
      y = (canvasHeight - height) / 2;
    } else {
      height = canvasHeight;
      width = height * imgRatio;
      x = (canvasWidth - width) / 2;
      y = 0;
    }
    
    ctx.clearRect(0, 0, canvasWidth, canvasHeight);
    ctx.drawImage(img, x, y, width, height);
  }
  
  // 6. Animation Loop
  function startAnimation() {
    let lastTime = performance.now();
    let currentFrame = 0;
    
    function animate(time) {
      const deltaTime = time - lastTime;
      lastTime = time;
      
      // Smooth, consistent rotation speed
      currentFrame = (currentFrame + spinSpeed * (deltaTime / 16.67)) % frameCount;
      drawFrame(currentFrame);
      
      requestAnimationFrame(animate);
    }
    
    animate(performance.now());
  }
  
  // 7. Initialize Everything
  function init() {
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);
    
    loadImages().then(() => {
      console.log('Viewer ready');
    }).catch(error => {
      console.error('Initialization error:', error);
    });
  }
  
  // Start the viewer
  init();
});
</script>