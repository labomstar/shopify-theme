{% schema %}
{
  "name": "Canvas 360 Viewer",
  "settings": [],
  "presets": [
    {
      "name": "Canvas 360 Rolex Style"
    }
  ]
}
{% endschema %}
<style>
  .canvas-360-section {
    width: 100vw;
    max-width: 100%;
    padding: 0;
    margin: 0 auto;
    display: flex;
    justify-content: center;
    align-items: center;
    background: #fff;
  }
  .canvas-360-wrapper {
    position: relative;
    width: 100vw;
    max-width: 600px;
    aspect-ratio: 4/5;
    background: #fff;
    margin: 0 auto;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  #watch360Canvas {
    width: 100%;
    height: 100%;
    display: block;
    background: transparent;
    cursor: grab;
    touch-action: pan-y;
    max-width: 100%;
    max-height: 100%;
  }
  .loading-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background: rgba(255,255,255,0.9);
    z-index: 10;
  }
  .progress-bar {
    width: 80%;
    height: 4px;
    background: #f0f0f0;
    margin-top: 10px;
    overflow: hidden;
  }
  .progress-fill {
    height: 100%;
    width: 0%;
    background: #333;
    transition: width 0.3s ease;
  }
  @media (max-width: 900px) {
    .canvas-360-wrapper {
      max-width: 90vw;
    }
  }
  @media (max-width: 600px) {
    .canvas-360-section {
      padding: 0;
    }
    .canvas-360-wrapper {
      max-width: 100vw;
      aspect-ratio: 4/5;
      min-height: 60vw;
    }
  }
</style>

<div class="canvas-360-section">
  <div class="canvas-360-wrapper">
    <canvas id="watch360Canvas"></canvas>
    <div class="loading-container" id="loadingContainer">
      <div>Loading Watch Viewer</div>
      <div class="progress-bar">
        <div class="progress-fill" id="progressFill"></div>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
  // 1. Configuration
  const CONFIG = {
    frameCount: 54,
    imageBaseUrl: 'https://cdn.shopify.com/s/files/1/0333/0936/0264/files/',
    batchSize: 5
  };

  // 2. State Management
  const state = {
    images: [],
    currentFrame: 0,
    ready: false,
    loadingProgress: 0
  };

  // 3. DOM Elements
  const canvas = document.getElementById('watch360Canvas');
  const ctx = canvas.getContext('2d');
  const loadingContainer = document.getElementById('loadingContainer');
  const progressFill = document.getElementById('progressFill');

  // 4. Optimized Canvas Setup
  function setupCanvas() {
    const pixelRatio = Math.min(window.devicePixelRatio || 1, 2);
    const rect = canvas.parentElement.getBoundingClientRect();
    canvas.width = rect.width * pixelRatio;
    canvas.height = rect.height * pixelRatio;
    canvas.style.width = rect.width + 'px';
    canvas.style.height = rect.height + 'px';
    ctx.setTransform(1, 0, 0, 1, 0, 0); // reset transform
    ctx.scale(pixelRatio, pixelRatio);
    ctx.imageSmoothingEnabled = true;
  }

  // 5. Fastest Image Loading
  async function loadImages() {
    // 1. Load only first frame and display instantly
    await loadFrameBatch(0, 1);
    state.ready = true;
    drawFrame();

    // 2. Load the rest in background, in small batches
    for (let i = 1; i < CONFIG.frameCount; i += CONFIG.batchSize) {
      await loadFrameBatch(i, CONFIG.batchSize);
      if (i === 1) loadingContainer.style.display = 'none'; // Hide loading UI after second batch
    }
    loadingContainer.style.display = 'none';
  }

  async function loadFrameBatch(start, count) {
    const end = Math.min(start + count, CONFIG.frameCount);
    await Promise.all(
      Array.from({length: end - start}, (_, i) => {
        const index = start + i;
        return new Promise(resolve => {
          const img = new Image();
          img.onload = () => {
            state.images[index] = img;
            updateProgress();
            if (Math.floor(state.currentFrame) === index) drawFrame();
            resolve();
          };
          img.onerror = () => {
            state.images[index] = state.images[index - 1] || createPlaceholder();
            updateProgress();
            resolve();
          };
          img.src = `${CONFIG.imageBaseUrl}1020_360_${index + 1}.jpg`;
        });
      })
    );
  }

  function createPlaceholder() {
    const canvas = document.createElement('canvas');
    canvas.width = 800;
    canvas.height = 1000;
    const ctx = canvas.getContext('2d');
    ctx.fillStyle = '#f5f5f5';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    return canvas;
  }

  function updateProgress() {
    const loaded = state.images.filter(img => img).length;
    state.loadingProgress = loaded / CONFIG.frameCount;
    progressFill.style.width = `${state.loadingProgress * 100}%`;
  }

  // 6. Drawing Logic
 function drawFrame() {
  if (!state.ready || state.images.length === 0) return;
  const frameIndex = Math.floor(state.currentFrame) % CONFIG.frameCount;
  const img = state.images[frameIndex];
  if (!img) return;
  const displayWidth = canvas.width / (window.devicePixelRatio || 1);
  const displayHeight = canvas.height / (window.devicePixelRatio || 1);
  const imgRatio = img.width / img.height;
  const canvasRatio = displayWidth / displayHeight;
  let width, height, x, y;
  if (imgRatio > canvasRatio) {
    width = displayWidth;
    height = width / imgRatio;
    x = 0;
    y = (displayHeight - height) / 2;
  } else {
    height = displayHeight;
    width = height * imgRatio;
    x = (displayWidth - width) / 2;
    y = 0;
  }
  ctx.clearRect(0, 0, displayWidth, displayHeight);
  // Fill the background with white before drawing the image
  ctx.fillStyle = "#fff";
  ctx.fillRect(0, 0, displayWidth, displayHeight);
  ctx.drawImage(img, x, y, width, height);
}

  // 7. Drag-to-Rotate Control
  let isDragging = false;
  let lastX = 0;
  let dragStartFrame = 0;

  // Mouse events
  canvas.addEventListener('mousedown', (e) => {
    isDragging = true;
    lastX = e.clientX;
    dragStartFrame = state.currentFrame;
    canvas.style.cursor = "grabbing";
  });

  window.addEventListener('mousemove', (e) => {
    if (!isDragging) return;
    const dx = e.clientX - lastX;
    const sensitivity = 2.5; // Lower = faster, higher = slower
    state.currentFrame = (dragStartFrame + dx / sensitivity) % CONFIG.frameCount;
    if (state.currentFrame < 0) state.currentFrame += CONFIG.frameCount;
    drawFrame();
  });

  window.addEventListener('mouseup', () => {
    isDragging = false;
    canvas.style.cursor = "grab";
  });

  canvas.addEventListener('mouseleave', () => {
    isDragging = false;
    canvas.style.cursor = "grab";
  });

  // Touch events
  canvas.addEventListener('touchstart', (e) => {
    if (e.touches.length !== 1) return;
    isDragging = true;
    lastX = e.touches[0].clientX;
    dragStartFrame = state.currentFrame;
  }, { passive: false });

  window.addEventListener('touchmove', (e) => {
    if (!isDragging || e.touches.length !== 1) return;
    const dx = e.touches[0].clientX - lastX;
    const sensitivity = 2.5;
    state.currentFrame = (dragStartFrame + dx / sensitivity) % CONFIG.frameCount;
    if (state.currentFrame < 0) state.currentFrame += CONFIG.frameCount;
    drawFrame();
  }, { passive: false });

  window.addEventListener('touchend', () => {
    isDragging = false;
  });

  // 8. Initialize
  function init() {
    setupCanvas();
    window.addEventListener('resize', () => {
      setupCanvas();
      drawFrame();
    });
    loadImages();
  }

  init();
});
</script>