{% schema %}
{
  "name": "Canvas 360 Viewer",
  "settings": [],
  "presets": [
    {
      "name": "Canvas 360 Rolex Style"
    }
  ]
}
{% endschema %}
<style>
@import url('https://fonts.googleapis.com/css2?family=Lato:wght@700&display=swap');

.canvas-360-section {
  width: 100vw;
  max-width: 100vw;
  padding: 2.5rem 0 0 0;
  margin: 0;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
  background: #000;
}

.canvas-360-headline {
  color: #fff;
  font-family: 'Lato', 'Helvetica Neue', Arial, sans-serif;
  font-size: 3rem;
  font-weight: 700;
  text-align: center;
  margin-bottom: 0rem;
  letter-spacing: 0.02em;
  text-shadow: 0 4px 24px rgba(0,0,0,0.20), 0 1px 0 #666;
  line-height: 1.15;
  max-width: 90vw;
  padding: 0 1rem;
}

.canvas-360-wrapper {
  position: relative;
  width: 100%;
  max-width: 600px;
  aspect-ratio: 4/5;
  background: #000;
  margin: 10rem;
  padding: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-start;
}

#watch360Canvas {
  width: 100%;
  height: 100%;
  display: block;
  background: #000;
  cursor: grab;
  touch-action: pan-y;
  max-width: 100%;
  max-height: 100%;
  margin-bottom: 1.2rem;
}

/* 360° Icon Styles */
.canvas-360-indicator {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-bottom: 1.4rem;
  user-select: none;
  pointer-events: none;
  opacity: 0.85;
  animation: pulse360 1.8s infinite;
}
@keyframes pulse360 {
  0% { opacity: 0.7; transform: scale(1);}
  50% { opacity: 1; transform: scale(1.12);}
  100% { opacity: 0.7; transform: scale(1);}
}

.canvas-360-explore-btn {
  display: inline-block;
  margin: 0 auto 2.2rem auto;
  padding: 1.1rem 2.7rem;
  background: #ff6b00;
  color: #fff;
  border: none;
  border-radius: 0rem;
  font-family: 'Lato', 'Helvetica Neue', Arial, sans-serif;
  font-weight: 700;
  font-size: 2rem;
  letter-spacing: 0.03em;
  text-transform: uppercase;
  box-shadow: 0 2px 12px rgba(255,107,0,0.18);
  cursor: pointer;
  transition: background 0.18s, box-shadow 0.18s, transform 0.12s;
  text-decoration: none;
  text-align: center;
}

.canvas-360-explore-btn:hover,
.canvas-360-explore-btn:focus {
  background: #ff8600;
  box-shadow: 0 4px 20px rgba(255,107,0,0.25);
  transform: translateY(-2px) scale(1.04);
  outline: none;
}

@media (max-width: 900px) {
  .canvas-360-wrapper {
    max-width: 90vw;
  }
  .canvas-360-headline {
    font-size: 2.4rem;
    margin-bottom: 1.8rem;
  }
}

@media (max-width: 600px) {
  .canvas-360-section {
    padding: 1.5rem 0 0 0;
  }
  .canvas-360-wrapper {
    width: 100%;
    max-width: 100vw;
    aspect-ratio: 4/5;
    min-height: 60vw;
  }
  .canvas-360-headline {
    font-size: 2rem;
    margin-bottom: 1.2rem;
    padding: 0 0.5rem;
  }
  #watch360Canvas {
    margin-bottom: 1rem;
  }
  .canvas-360-explore-btn {
    font-size: 1.3rem;
    padding: 1rem 1.9rem;
    margin-bottom: 1.4rem;
  }
}
</style>

<div class="canvas-360-section">
  <div class="canvas-360-headline">
    Crafted for Your Story. Built on Ours
  </div>
  <div class="canvas-360-wrapper">
    <canvas id="watch360Canvas"></canvas>
    <div class="canvas-360-indicator">
  <svg width="100" height="48" viewBox="0 0 100 48" fill="none" xmlns="http://www.w3.org/2000/svg" aria-label="360 degrees spin direction">
    <text x="20" y="22" font-family="Arial, Helvetica, sans-serif" font-size="28" fill="#fff" font-weight="bold" fill="#fff">360°</text>
    <!-- Arc (arrow body) -->
    <path d="M18 36 Q50 52 82 36" stroke="#fff" stroke-width="4" fill="none" />
    <!-- Arrowhead -->
    <path d="M82 36 L76 32 M82 36 L76 40" stroke="#fff" stroke-width="4" fill="none" stroke-linecap="round"/>
    <path d="M82 36 L76 40" stroke="#fff" stroke-width="4" fill="none" stroke-linecap="round"/>
  </svg>
</div>
    <a 
      class="canvas-360-explore-btn" 
      href="https://stuhrling.com/products/swiss-automatic-datemaster?variant=44829378052262"
      target="_blank" 
      rel="noopener"
    >
      Explore
    </a>
  </div>
</div>
<script>
document.addEventListener("DOMContentLoaded", function() {
  // 1. Configuration
  const CONFIG = {
    frameCount: 54,
    imageBaseUrl: 'https://cdn.shopify.com/s/files/1/0333/0936/0264/files/',
    batchSize: 5
  };

  // 2. State Management
  const state = {
    images: [],
    currentFrame: 0,
    ready: false
  };

  // 3. DOM Elements
  const canvas = document.getElementById('watch360Canvas');
  const ctx = canvas.getContext('2d');

  // 4. Optimized Canvas Setup
  function setupCanvas() {
    const pixelRatio = Math.min(window.devicePixelRatio || 1, 2);
    const rect = canvas.parentElement.getBoundingClientRect();
    canvas.width = rect.width * pixelRatio;
    canvas.height = rect.height * pixelRatio;
    canvas.style.width = rect.width + 'px';
    canvas.style.height = rect.height + 'px';
    ctx.setTransform(1, 0, 0, 1, 0, 0); // reset transform
    ctx.scale(pixelRatio, pixelRatio);
    ctx.imageSmoothingEnabled = true;
  }

  // 5. Fastest Image Loading
  async function loadImages() {
    // 1. Load only first frame and display instantly
    await loadFrameBatch(0, 1);
    state.ready = true;
    drawFrame();

    // 2. Load the rest in background, in small batches
    for (let i = 1; i < CONFIG.frameCount; i += CONFIG.batchSize) {
      loadFrameBatch(i, CONFIG.batchSize);
    }
  }

  async function loadFrameBatch(start, count) {
    const end = Math.min(start + count, CONFIG.frameCount);
    await Promise.all(
      Array.from({length: end - start}, (_, i) => {
        const index = start + i;
        return new Promise(resolve => {
          const img = new Image();
          img.onload = () => {
            state.images[index] = img;
            if (Math.floor(state.currentFrame) === index) drawFrame();
            resolve();
          };
          img.onerror = () => {
            state.images[index] = state.images[index - 1] || createPlaceholder();
            resolve();
          };
          img.src = `${CONFIG.imageBaseUrl}1020_360_${index + 1}.jpg`;
        });
      })
    );
  }

  function createPlaceholder() {
    const canvas = document.createElement('canvas');
    canvas.width = 800;
    canvas.height = 1000;
    const ctx = canvas.getContext('2d');
    ctx.fillStyle = '#f5f5f5';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    return canvas;
  }

  // 6. Drawing Logic
  function drawFrame() {
    if (!state.ready || state.images.length === 0) return;
    const frameIndex = Math.floor(state.currentFrame) % CONFIG.frameCount;
    const img = state.images[frameIndex];
    if (!img) return;
    const displayWidth = canvas.width / (window.devicePixelRatio || 1);
    const displayHeight = canvas.height / (window.devicePixelRatio || 1);
    ctx.clearRect(0, 0, displayWidth, displayHeight);
    ctx.fillStyle = "#000";
    ctx.fillRect(0, 0, displayWidth, displayHeight);

    // --- COVER LOGIC (fills all canvas, may crop image) ---
    const imgRatio = img.width / img.height;
    const canvasRatio = displayWidth / displayHeight;
    let width, height, x, y;

    if (imgRatio > canvasRatio) {
      // Image is wider than canvas: fit by height, crop width
      height = displayHeight;
      width = height * imgRatio;
      x = (displayWidth - width) / 2;
      y = 0;
    } else {
      // Image is taller than canvas: fit by width, crop height
      width = displayWidth;
      height = width / imgRatio;
      x = 0;
      y = (displayHeight - height) / 2;
    }

    ctx.drawImage(img, x, y, width, height);
  }

  // 7. Drag-to-Rotate Control
  let isDragging = false;
  let lastX = 0;
  let dragStartFrame = 0;

  // Mouse events
  canvas.addEventListener('mousedown', (e) => {
    isDragging = true;
    lastX = e.clientX;
    dragStartFrame = state.currentFrame;
    canvas.style.cursor = "grabbing";
  });

  window.addEventListener('mousemove', (e) => {
    if (!isDragging) return;
    const dx = e.clientX - lastX;
    const sensitivity = 2.5; // Lower = faster, higher = slower
    state.currentFrame = (dragStartFrame + dx / sensitivity) % CONFIG.frameCount;
    if (state.currentFrame < 0) state.currentFrame += CONFIG.frameCount;
    drawFrame();
  });

  window.addEventListener('mouseup', () => {
    isDragging = false;
    canvas.style.cursor = "grab";
  });

  canvas.addEventListener('mouseleave', () => {
    isDragging = false;
    canvas.style.cursor = "grab";
  });

  // Touch events
  canvas.addEventListener('touchstart', (e) => {
    if (e.touches.length !== 1) return;
    isDragging = true;
    lastX = e.touches[0].clientX;
    dragStartFrame = state.currentFrame;
  }, { passive: false });

  window.addEventListener('touchmove', (e) => {
    if (!isDragging || e.touches.length !== 1) return;
    const dx = e.touches[0].clientX - lastX;
    const sensitivity = 2.5;
    state.currentFrame = (dragStartFrame + dx / sensitivity) % CONFIG.frameCount;
    if (state.currentFrame < 0) state.currentFrame += CONFIG.frameCount;
    drawFrame();
  }, { passive: false });

  window.addEventListener('touchend', () => {
    isDragging = false;
  });

  // 8. Initialize
  function init() {
    setupCanvas();
    window.addEventListener('resize', () => {
      setupCanvas();
      drawFrame();
    });
    loadImages();
  }

  init();
});
</script>